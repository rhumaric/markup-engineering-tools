@import "./list";

// From sass-mq: https://github.com/sass-mq/sass-mq/blob/master/_mq.scss#L271
@function map-sort-by-value($map, $order: asc) {
  $map-sorted: ();
  $map-keys: map-keys($map);
  $map-values: map-values($map);
  $map-values-sorted: list-sort($map-values, $order);

  // Reorder key/value pairs based on key values
  @each $value in $map-values-sorted {
    $index: index($map-values, $value);
    $key: nth($map-keys, $index);
    $map-sorted: map-merge(
      $map-sorted,
      (
        $key: $value
      )
    );

    // Unset the value in $map-values to prevent the loop
    // from finding the same index twice
    $map-values: set-nth($map-values, $index, 0);
  }

  @return $map-sorted;
}

@function map-set($map, $key-or-list-or-map, $value: null, $sort: false) {
  $update: map-from($key-or-list-or-map, $value);
  $merged: map-merge($map, $update);

  @if ($sort) {
    @return map-sort-by-value($merged);
  }

  @return $merged;
}

@function map-from($key-or-list-or-map, $value: null) {
  @if type-of($key-or-list-or-map) == "map" {
    @return $key-or-list-or-map;
  } @else if type-of($key-or-list-or-map) == "list" {
    @return (nth($key-or-list-or-map, 1): nth($key-or-list-or-map, 2));
  } @else {
    @return ($key-or-list-or-map: $value);
  }
}

@function map-pick($map, $keys) {
  $picks: ();
  @each $key in $keys {
    $picks: map-merge(
      $picks,
      (
        $key: map-get($map, $key)
      )
    );
  }
  @return $picks;
}

@function map-map($map, $function) {
  $mapped: ();
  @each $key, $value in $map {
    $mapped-value: call(get-function($function), $value, $key);
    $mapped: map-merge(
      $mapped,
      (
        $key: $mapped-value
      )
    );
  }
  @return $mapped;
}
