@import "mapping";
@import "map";
@import "breakpoints";

@mixin responsive-mapping($values, $mapping: null, $breakpoints: $breakpoints) {
  @if (type-of($mapping) == list) {
    @include responsive-mapping(
      $values,
      (
        from: $mapping,
        until: $mapping
      ),
      $breakpoints
    ) {
      @content;
    }
  } @else {
    @each $breakpoint-type in (from, until) {
      $breakpoint-list: map-get($mapping, $breakpoint-type);
      @if ($breakpoint-list) {
        $from-breakpoints: responsive-mapping-filter-breakpoints(
          $breakpoints,
          $breakpoint-list
        );
        @if ($breakpoint-type == until) {
          $from-breakpoints: map-sort-by-value($from-breakpoints, desc);
        }
        $from-breakpoints: map-map($from-breakpoints, $breakpoint-type);
        @include mapping(
          $values,
          $from-breakpoints,
          $values-filter:
            if(type-of($breakpoint-list) == "map", $breakpoint-list, null),
          $context: (breakpoint-type: $breakpoint-type)
        ) {
          @content;
        }
      }
    }
  }
}

@function responsive-mapping-filter-breakpoints(
  $breakpoints,
  $breakpoint-list
) {
  $breakpoint-keys: $breakpoint-list;
  @if (type-of($breakpoint-list) == "map") {
    $breakpoint-keys: map-keys($breakpoint-list);
  }

  @return map-pick($breakpoints, $breakpoint-keys);
}
